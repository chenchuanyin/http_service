/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef flume_TYPES_H
#define flume_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





struct Status {
  enum type {
    OK = 0,
    FAILED = 1,
    ERROR_T = 2,
    UNKNOWN = 3
  };
};

extern const std::map<int, const char*> _Status_VALUES_TO_NAMES;


class ThriftFlumeEvent {
 public:

  static const char* ascii_fingerprint; // = "8275A3654F3E556315307034EBB995BC";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x75,0xA3,0x65,0x4F,0x3E,0x55,0x63,0x15,0x30,0x70,0x34,0xEB,0xB9,0x95,0xBC};

  ThriftFlumeEvent() : body() {
  }

  virtual ~ThriftFlumeEvent() throw() {}

  std::map<std::string, std::string>  headers;
  std::string body;

  void __set_headers(const std::map<std::string, std::string> & val) {
    headers = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const ThriftFlumeEvent & rhs) const
  {
    if (!(headers == rhs.headers))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const ThriftFlumeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftFlumeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ThriftFlumeEvent &a, ThriftFlumeEvent &b);



#endif
